#!/bin/bash

# Local Test Script for Magic Bar
# This script automates the process of:
# 1. Building the Magic Bar with the correct local URL
# 2. Starting a local server to serve the dist directory
# 3. Opening a test page in the browser

echo "üß™ Magic Bar Local Testing Script"
echo "=================================="

# Check if serve is installed
if ! command -v npx &> /dev/null; then
  echo "‚ùå Error: npx is not installed. Please install Node.js."
  exit 1
fi

# Kill any background processes when the script exits
cleanup() {
  echo "üßπ Cleaning up..."
  if [ ! -z "$SERVER_PID" ]; then
    echo "üõë Stopping server (PID: $SERVER_PID)..."
    kill $SERVER_PID 2>/dev/null
  fi
  echo "‚úÖ Done"
}
trap cleanup EXIT

# Step 1: Find an available port
echo "üîç Finding available port..."
# Let serve choose a port - will extract it from output
PORT="3000" # default, will be updated

# Step 2: Build the project with the correct URL - will be adjusted after we know the actual port
echo "üèóÔ∏è Building Magic Bar (initially with localhost:$PORT)..."
export MAGIC_BAR_BASE_URL="http://localhost:$PORT"
npm run build:local

if [ $? -ne 0 ]; then
  echo "‚ùå Build failed"
  exit 1
fi

# Step 3: Start the server and capture its output to determine the actual port
echo "üöÄ Starting server..."
# Start serve and capture its output
SERVER_OUTPUT=$(mktemp)
npx serve dist > "$SERVER_OUTPUT" 2>&1 &
SERVER_PID=$!

# Wait a moment for the server to start
sleep 2

# Extract the actual port from server output
ACTUAL_PORT=$(grep -o "http://localhost:[0-9]\+" "$SERVER_OUTPUT" | head -1 | cut -d':' -f3)

if [ -z "$ACTUAL_PORT" ]; then
  echo "‚ùå Could not determine the port the server is running on"
  cat "$SERVER_OUTPUT"
  exit 1
fi

echo "‚úÖ Server running on port $ACTUAL_PORT"

# If the actual port is different from our initial port, rebuild with the correct port
if [ "$PORT" != "$ACTUAL_PORT" ]; then
  echo "üîÑ Rebuilding with correct port $ACTUAL_PORT..."
  export MAGIC_BAR_BASE_URL="http://localhost:$ACTUAL_PORT"
  npm run build:local
  
  if [ $? -ne 0 ]; then
    echo "‚ùå Rebuild failed"
    exit 1
  fi
  
  # Restart the server with the updated files
  echo "üîÑ Restarting server..."
  kill $SERVER_PID
  npx serve dist > /dev/null 2>&1 &
  SERVER_PID=$!
  sleep 2
fi

# Step 4: Create a test HTML file with the correct port
echo "üìù Creating test HTML file..."
cat > local-test.html << EOL
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Magic Bar Local Test</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      padding: 20px;
      max-width: 800px;
      margin: 0 auto;
      line-height: 1.6;
    }
    h1 {
      border-bottom: 1px solid #eee;
      padding-bottom: 10px;
    }
    .footer {
      margin-top: 30px;
      padding-top: 10px;
      border-top: 1px solid #eee;
      font-size: 0.8em;
      color: #666;
    }
  </style>
</head>
<body>
  <h1>Magic Bar Local Test Page</h1>
  <p>This page tests the Magic Bar bootloader in a local environment.</p>
  <p><strong>Using server on port: $ACTUAL_PORT</strong></p>
  <p>If you don't see the Magic Bar appearing, check the browser console (F12) for errors.</p>
  
  <!-- Magic Bar Integration -->
  <script>
  (function () {
    const script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = 'http://localhost:$ACTUAL_PORT/bootloader.min.js';
    script.async = true;
    document.body.appendChild(script);
  })();
  </script>
  
  <div class="footer">
    <p>Test page generated by local-test.sh script.</p>
    <p>Server running at: <a href="http://localhost:$ACTUAL_PORT">http://localhost:$ACTUAL_PORT</a></p>
  </div>
</body>
</html>
EOL

echo "‚úÖ Server running at http://localhost:$ACTUAL_PORT"

# Step 5: Open the test page in the browser
echo "üåê Opening test page in browser..."
if [[ "$OSTYPE" == "darwin"* ]]; then
  # macOS
  open local-test.html
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
  # Linux
  xdg-open local-test.html
elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
  # Windows
  start local-test.html
else
  echo "‚ö†Ô∏è Could not automatically open browser. Please open local-test.html manually."
fi

echo "‚úÖ Done! Magic Bar should be loaded in your browser."
echo "   Press Ctrl+C to stop the server when finished."

# Keep the script running until interrupted
wait $SERVER_PID 